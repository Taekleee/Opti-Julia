}
new_list
}
crossing <- function(lista1, lista2,m){
n = ceiling(length(lista1[[1]])/2)
new_list = lista1[[1]][1:n]
i <- 0
j <- 0
while (i < length(lista2[[1]])) {
if(!lista2[[1]][i+1] %in% new_list){
new_list[[length(new_list)+1]] = lista2[[1]][i+1]
}
i <- i + 1
}
new_list
}
mutation<- function(p_prima, number, n, prob,type){
for (i in 1:n) {
if(runif(1,0,1) < prob){
if(type == 1){
max_p_prima = max(p_prima[[i]])
p_prima[[i]] <- p_prima[[i]]-1
p_prima[[i]][ which.min(p_prima[[i]])] <- max_p_prima
}
else if(type==2){
x <- sample(1:n, 2, replace=F)
p_prima[[i]]<-swap(p_prima[[i]],x[1],x[2])
}
else{
x <- sample(1:n, 6, replace=T)
p_prima[[i]]<-swap(p_prima[[i]],x[1],x[2])
p_prima[[i]]<-swap(p_prima[[i]],x[3],x[4])
p_prima[[i]]<-swap(p_prima[[i]],x[5],x[6])
}
}
}
p_prima
}
evaluate_and_replace<- function(p_prima,p,f,d,n){
i = 0
evaluation_new = list()
evaluation_old = list()
result = list()
j = 0
while (i < n)  {
evaluation_new[[i+1]] <- evaluarQAP(p_prima[[i+1]], f, d)
evaluation_old[[i+1]] <- evaluarQAP(p[[i+1]], f, d)
i = i + 1
}
aux_evaluation_new = evaluation_new
aux_evaluation_old = evaluation_old
n = ceiling(n*0.4)
for (i in 1:n){
result <- append(result,p_prima[which.min(evaluation_new)])
evaluation_new[which.min(evaluation_new)] <- exp(99)
}
n = n+ceiling(n*0.2)
for (i in 1:n){
result <- append(result,p[which.min(evaluation_old)])
evaluation_old[which.min(evaluation_old)] <- exp(99)
}
n = n+ceiling(n*0.2)
for (i in 1:n){
result <- append(result,p_prima[which.max(aux_evaluation_new)])
aux_evaluation_new[which.max(aux_evaluation_new)] <- -1*exp(99)
}
n = length(p_prima)-n
for (i in 1:n){
result <- append(result,p[which.max(aux_evaluation_old)])
aux_evaluation_old[which.max(aux_evaluation_old)] <- -1*exp(99)
}
result
}
# Se crea la población inicial a partir de summulated anealing
filename<- "had12.dat"
instancia<-readQAP(filename)
n <- instancia$n
i<- 0
p <- list()
#while (i < 20) {
#  p[[i+1]] <- (SA_QAP("bur26a.dat",0.8,2000, 0.1, 2,2,0))
#  i <- i +1
#}
time<- proc.time()
size_p = 100
for (i in 1:size_p) {
p[[i]] <- sample(1:n,n)
}
#Algoritmo genético
t = 0
prob = 0.1
final <- list()
while (t < 200) {
#Selección: Torneo
p_prima <- selection(p,n,instancia$f,instancia$d,size_p)
p_prima <- reproduction_crossing(p_prima, length(p_prima),size_p)
p_prima <- mutation(p_prima, length(p_prima),size_p, prob,3)
p <- evaluate_and_replace(p_prima,p,instancia$f, instancia$d,length(p_prima))
final[t+1] <- best(p,instancia$f,instancia$d)
t = t + 1
}
print(proc.time()-time)
#bur26a.dat1
#bur26a.dat2
#bur26a.dat3
#had12.dat1
#had12.dat2
#had12.dat3
#rou15.dat1
#rou15.dat2
#rou15.dat3
#chr18a.dat1
#chr18a.dat2
#chr18a.dat3
#nug12.dat1
#nug12.dat2
#nug12.dat3
#chr15c.dat1
#chr15c.dat2
#chr15c.dat3
plot(as.numeric(final))
had12.dat2<-final
# Se crea la población inicial a partir de summulated anealing
filename<- "had12.dat"
instancia<-readQAP(filename)
n <- instancia$n
i<- 0
p <- list()
#while (i < 20) {
#  p[[i+1]] <- (SA_QAP("bur26a.dat",0.8,2000, 0.1, 2,2,0))
#  i <- i +1
#}
time<- proc.time()
size_p = 100
for (i in 1:size_p) {
p[[i]] <- sample(1:n,n)
}
#Algoritmo genético
t = 0
prob = 0.1
final <- list()
while (t < 200) {
#Selección: Torneo
p_prima <- selection(p,n,instancia$f,instancia$d,size_p)
p_prima <- reproduction_crossing(p_prima, length(p_prima),size_p)
p_prima <- mutation(p_prima, length(p_prima),size_p, prob,2)
p <- evaluate_and_replace(p_prima,p,instancia$f, instancia$d,length(p_prima))
final[t+1] <- best(p,instancia$f,instancia$d)
t = t + 1
}
print(proc.time()-time)
#bur26a.dat1
#bur26a.dat2
#bur26a.dat3
#had12.dat1
#had12.dat2
#had12.dat3
#rou15.dat1
#rou15.dat2
#rou15.dat3
#chr18a.dat1
#chr18a.dat2
#chr18a.dat3
#nug12.dat1
#nug12.dat2
#nug12.dat3
#chr15c.dat1
#chr15c.dat2
#chr15c.dat3
final
mean(as.numeric(fiinal))
mean(as.numeric(final))
# Se crea la población inicial a partir de summulated anealing
filename<- "had12.dat"
instancia<-readQAP(filename)
n <- instancia$n
i<- 0
p <- list()
#while (i < 20) {
#  p[[i+1]] <- (SA_QAP("bur26a.dat",0.8,2000, 0.1, 2,2,0))
#  i <- i +1
#}
time<- proc.time()
size_p = 50
for (i in 1:size_p) {
p[[i]] <- sample(1:n,n)
}
#Algoritmo genético
t = 0
prob = 0.1
final <- list()
while (t < 100) {
#Selección: Torneo
p_prima <- selection(p,n,instancia$f,instancia$d,size_p)
p_prima <- reproduction_crossing(p_prima, length(p_prima),size_p)
p_prima <- mutation(p_prima, length(p_prima),size_p, prob,2)
p <- evaluate_and_replace(p_prima,p,instancia$f, instancia$d,length(p_prima))
final[t+1] <- best(p,instancia$f,instancia$d)
t = t + 1
}
print(proc.time()-time)
#bur26a.dat1
#bur26a.dat2
#bur26a.dat3
#had12.dat1
#had12.dat2
#had12.dat3
#rou15.dat1
#rou15.dat2
#rou15.dat3
#chr18a.dat1
#chr18a.dat2
#chr18a.dat3
#nug12.dat1
#nug12.dat2
#nug12.dat3
#chr15c.dat1
#chr15c.dat2
#chr15c.dat3
plot(as.numeric(final))
plot(as.numeric(final),type="o",main = "Algoritmo genético had12.dat operador 1")
plot(as.numeric(final),type="o",main = "Algoritmo genético had12.dat operador 1", xlabel="a")
plot(as.numeric(final),type="o",main = "Algoritmo genético had12.dat operador 1", x="a")
plot(as.numeric(final),type="o",main = "Algoritmo genético had12.dat operador 1", xlab="Generaciones", ylab="Fitness")
min(as.numeric(final))
mean(as.numeric(final))
had12.dat1<- final
# Se crea la población inicial a partir de summulated anealing
filename<- "had12.dat"
instancia<-readQAP(filename)
n <- instancia$n
i<- 0
p <- list()
#while (i < 20) {
#  p[[i+1]] <- (SA_QAP("bur26a.dat",0.8,2000, 0.1, 2,2,0))
#  i <- i +1
#}
time<- proc.time()
size_p = 50
for (i in 1:size_p) {
p[[i]] <- sample(1:n,n)
}
#Algoritmo genético
t = 0
prob = 0.1
final <- list()
while (t < 100) {
#Selección: Torneo
p_prima <- selection(p,n,instancia$f,instancia$d,size_p)
p_prima <- reproduction_crossing(p_prima, length(p_prima),size_p)
p_prima <- mutation(p_prima, length(p_prima),size_p, prob,3)
p <- evaluate_and_replace(p_prima,p,instancia$f, instancia$d,length(p_prima))
final[t+1] <- best(p,instancia$f,instancia$d)
t = t + 1
}
print(proc.time()-time)
#bur26a.dat1
#bur26a.dat2
#bur26a.dat3
#had12.dat1
#had12.dat2
#had12.dat3
#rou15.dat1
#rou15.dat2
#rou15.dat3
#chr18a.dat1
#chr18a.dat2
#chr18a.dat3
#nug12.dat1
#nug12.dat2
#nug12.dat3
#chr15c.dat1
#chr15c.dat2
#chr15c.dat3
plot(as.numeric(final),type="o",main = "Algoritmo genético had12.dat operador 2", xlab="Generaciones", ylab="Fitness")
had12.dat2<- final
min(as.numeric(final))
mean(as.numeric(final))
# Se crea la población inicial a partir de summulated anealing
filename<- "had12.dat"
instancia<-readQAP(filename)
n <- instancia$n
i<- 0
p <- list()
#while (i < 20) {
#  p[[i+1]] <- (SA_QAP("bur26a.dat",0.8,2000, 0.1, 2,2,0))
#  i <- i +1
#}
time<- proc.time()
size_p = 50
for (i in 1:size_p) {
p[[i]] <- sample(1:n,n)
}
#Algoritmo genético
t = 0
prob = 0.1
final <- list()
while (t < 100) {
#Selección: Torneo
p_prima <- selection(p,n,instancia$f,instancia$d,size_p)
p_prima <- reproduction_crossing(p_prima, length(p_prima),size_p)
p_prima <- mutation(p_prima, length(p_prima),size_p, prob,1)
p <- evaluate_and_replace(p_prima,p,instancia$f, instancia$d,length(p_prima))
final[t+1] <- best(p,instancia$f,instancia$d)
t = t + 1
}
print(proc.time()-time)
#bur26a.dat1
#bur26a.dat2
#bur26a.dat3
#had12.dat1
#had12.dat2
#had12.dat3
#rou15.dat1
#rou15.dat2
#rou15.dat3
#chr18a.dat1
#chr18a.dat2
#chr18a.dat3
#nug12.dat1
#nug12.dat2
#nug12.dat3
#chr15c.dat1
#chr15c.dat2
#chr15c.dat3
plot(as.numeric(final),type="o",main = "Algoritmo genético had12.dat operador 2", xlab="Generaciones", ylab="Fitness")
stripchart(as.numeric(final), pch = 19, add = TRUE, col = "blue")
boxplot(as.numeric(final))
stripchart(as.numeric(final), pch = 19, add = TRUE, col = "blue")
stripchart(as.numeric(had12.dat1), pch = 19, add = TRUE, col = "blue")
boxplot(as.numeric(had12.dat1))
stripchart(as.numeric(had12.dat1), pch = 19, add = TRUE, col = "blue")
data = list()
for (h in 1:11) {
# Se crea la población inicial a partir de summulated anealing
filename<- "had12.dat"
instancia<-readQAP(filename)
n <- instancia$n
i<- 0
p <- list()
#while (i < 20) {
#  p[[i+1]] <- (SA_QAP("bur26a.dat",0.8,2000, 0.1, 2,2,0))
#  i <- i +1
#}
time<- proc.time()
size_p = 50
for (i in 1:size_p) {
p[[i]] <- sample(1:n,n)
}
#Algoritmo genético
t = 0
prob = 0.1
final <- list()
while (t < 100) {
#Selección: Torneo
p_prima <- selection(p,n,instancia$f,instancia$d,size_p)
p_prima <- reproduction_crossing(p_prima, length(p_prima),size_p)
p_prima <- mutation(p_prima, length(p_prima),size_p, prob,2)
p <- evaluate_and_replace(p_prima,p,instancia$f, instancia$d,length(p_prima))
final[t+1] <- best(p,instancia$f,instancia$d)
t = t + 1
}
print(proc.time()-time)
#bur26a.dat1
#bur26a.dat2
#bur26a.dat3
#had12.dat1
#had12.dat2
#had12.dat3
#rou15.dat1
#rou15.dat2
#rou15.dat3
#chr18a.dat1
#chr18a.dat2
#chr18a.dat3
#nug12.dat1
#nug12.dat2
#nug12.dat3
#chr15c.dat1
#chr15c.dat2
#chr15c.dat3
data[h]<- min(as.numeric(final))
}
boxplot(as.numeric(data))
data2 = list()
for (h in 1:11) {
# Se crea la población inicial a partir de summulated anealing
filename<- "had12.dat"
instancia<-readQAP(filename)
n <- instancia$n
i<- 0
p <- list()
#while (i < 20) {
#  p[[i+1]] <- (SA_QAP("bur26a.dat",0.8,2000, 0.1, 2,2,0))
#  i <- i +1
#}
time<- proc.time()
size_p = 50
for (i in 1:size_p) {
p[[i]] <- sample(1:n,n)
}
#Algoritmo genético
t = 0
prob = 0.1
final <- list()
while (t < 100) {
#Selección: Torneo
p_prima <- selection(p,n,instancia$f,instancia$d,size_p)
p_prima <- reproduction_crossing(p_prima, length(p_prima),size_p)
p_prima <- mutation(p_prima, length(p_prima),size_p, prob,3)
p <- evaluate_and_replace(p_prima,p,instancia$f, instancia$d,length(p_prima))
final[t+1] <- best(p,instancia$f,instancia$d)
t = t + 1
}
print(proc.time()-time)
#bur26a.dat1
#bur26a.dat2
#bur26a.dat3
#had12.dat1
#had12.dat2
#had12.dat3
#rou15.dat1
#rou15.dat2
#rou15.dat3
#chr18a.dat1
#chr18a.dat2
#chr18a.dat3
#nug12.dat1
#nug12.dat2
#nug12.dat3
#chr15c.dat1
#chr15c.dat2
#chr15c.dat3
data2[h]<- min(as.numeric(final))
}
boxplot(as.numeric(data2))
data3 = list()
for (h in 1:11) {
# Se crea la población inicial a partir de summulated anealing
filename<- "had12.dat"
instancia<-readQAP(filename)
n <- instancia$n
i<- 0
p <- list()
#while (i < 20) {
#  p[[i+1]] <- (SA_QAP("bur26a.dat",0.8,2000, 0.1, 2,2,0))
#  i <- i +1
#}
time<- proc.time()
size_p = 50
for (i in 1:size_p) {
p[[i]] <- sample(1:n,n)
}
#Algoritmo genético
t = 0
prob = 0.1
final <- list()
while (t < 100) {
#Selección: Torneo
p_prima <- selection(p,n,instancia$f,instancia$d,size_p)
p_prima <- reproduction_crossing(p_prima, length(p_prima),size_p)
p_prima <- mutation(p_prima, length(p_prima),size_p, prob,1)
p <- evaluate_and_replace(p_prima,p,instancia$f, instancia$d,length(p_prima))
final[t+1] <- best(p,instancia$f,instancia$d)
t = t + 1
}
print(proc.time()-time)
#bur26a.dat1
#bur26a.dat2
#bur26a.dat3
#had12.dat1
#had12.dat2
#had12.dat3
#rou15.dat1
#rou15.dat2
#rou15.dat3
#chr18a.dat1
#chr18a.dat2
#chr18a.dat3
#nug12.dat1
#nug12.dat2
#nug12.dat3
#chr15c.dat1
#chr15c.dat2
#chr15c.dat3
data3[h]<- min(as.numeric(final))
}
boxplot(as.numeric(data), as.numeric(data2), as.numeric(data3))
stripchart(as.numerica(data), method = "jitter", pch = 19, add = TRUE, col = "blue")
stripchart(as.numeric(data), method = "jitter", pch = 19, add = TRUE, col = "blue")
boxplot(as.numeric(data), as.numeric(data2), as.numeric(data3),main="Diagrama de cajas", col=c(123,234,445))
boxplot(as.numeric(data), as.numeric(data2), as.numeric(data3),main="Diagrama de cajas", col=c(123,234,445),, notch=T)
boxplot(as.numeric(data), as.numeric(data2), as.numeric(data3),main="Diagrama de cajas", col=c(123,234,445), notch=T)
boxplot(as.numeric(data), as.numeric(data2), as.numeric(data3),main="Diagrama de cajas", col=c(123,234,445))
boxplot(as.numeric(data), as.numeric(data2), as.numeric(data3),main="Diagrama de cajas", col=c(123,234,445))
boxplot(as.numeric(data), as.numeric(data2), as.numeric(data3),main="Instancia had12.dat con mutaciones 1, 2 y 3", xlab"Mutación", ylab="Fitness", col=c(123,234,445))
boxplot(as.numeric(data), as.numeric(data2), as.numeric(data3),main="Instancia had12.dat con mutaciones 1, 2 y 3", col=c(123,234,445))
t.test(mean(as.numeric(data)) ~ mean(as.numeric(data2)))
t.test(mean(as.numeric(data)), mean(as.numeric(data2)))
t.test((as.numeric(data)), (as.numeric(data2)))
a1<-t.test((as.numeric(data)), (as.numeric(data2)))
a1$p.value
a1$p.value<0.05
mean
mean(as.numeric(data))
mean(as.numeric(data2))
mean(as.numeric(data3))
a1<-t.test((as.numeric(data)), (as.numeric(data3)))
a1
a1$p.value<0.05
a1<-t.test((as.numeric(data2)), (as.numeric(data3)))
a1
